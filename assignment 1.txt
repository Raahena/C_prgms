program 1
Sherlock and Array 
 
Watson gives Sherlock an array of integers. His challenge is to find an element of the array such 
that the sum of all elements to the left is equal to the sum of all elements to the right. For 
instance, given the array arr = [5, 6, 8, 11], 8 is between two subarrays that sum to 11. If your 
starting array is [1], that element satisfies the rule as left and right sum to 0. 
 
You will be given arrays of integers and must determine whether there is an element that meets 
the criterion. 
 
Complete the code in the editor below. It should return a string, either YES if there is an element 
meeting the criterion or NO otherwise. 
 
It has the following: 
 arr: an array of integers 
 
Input Format 
 
The first line contains T, the number of test cases. 
The next T pairs of lines each represent a test case. - The first line contains n, the number of elements in the array arr. - The second line contains n space-separated integers arr[i] where 0 ≤ i < n. 
 
Constraints 
 
 1 ≤ T ≤ 10 
 1 ≤ n ≤ 105 
 1 ≤ arr[i] ≤ 2 x 104 
 0 ≤ i ≤ n 
 
Output Format 
 
For each test case print YES if there exists an element in the array, such that the sum of the 
elements on its left is equal to the sum of the elements on its right; otherwise print NO. 
 
Sample Input 0 
 
2 
3 
1 2 3 
4 
1 2 3 3 
 
Sample Output 0 
 
NO 
YES 
  

 
Explanation 0 
 
For the first test case, no such index exists. 
For the second test case, arr[0] + arr[1] = arr[3], therefore index 2 satisfies the given 
conditions. 
 
Sample Input 1 
 
3 
5 
1 1 4 1 1 
4 
2 0 0 0 
4 
0 0 2 0  
 
Sample Output 1 
 
YES 
YES 
YES 
 
Explanation 1 
 
In the first test case, arr[2] = 4 is between two subarrays summing to 2. 
In the second case, arr[0] = 2 is between two subarrays summing to 0. 
In the third case, arr[2] = 2 is between two subarrays summing to 0.




program 2
Ice Cream Parlor 
 
Sunny and Johnny like to pool their money and go to the ice cream parlor. Johnny never buys 
the same flavor that Sunny does. The only other rule they have is that they spend all of their 
money. 
 
Given a list of prices for the flavors of ice cream, select the two that will cost all of the money 
they have. 
 
For example, they have m = 6 to spend and there are flavors costing cost = [1, 2, 3, 4, 5, 6]. The 
two flavors costing 1 and 5 meet the criteria. Using 1-based indexing, they are at indices 1 and 
4. 
 
Complete the code in the editor below. It should return an array containing the indices of the 
prices of the two flavors they buy, sorted ascending. 
 
It has the following: 
 m: an integer denoting the amount of money they have to spend 
 cost: an integer array denoting the cost of each flavor of ice cream 
 
Input Format 
 
The first line contains an integer, t, denoting the number of trips to the ice cream parlor. The 
next t sets of lines each describe a visit. Each trip is described as follows: 
 
1. The integer m, the amount of money they have pooled. 
2. The integer n, the number of flavors offered at the time. 
3. n space-separated integers denoting the cost of each flavor: cost[cost[1], cost[2], . . . , 
cost[n]]. 
 
Note: The index within the cost array represents the flavor of the ice cream purchased. 
 
Constraints 
 
 1 ≤ t ≤ 50 
 2 ≤ m ≤ 104 
 2 ≤ n ≤ 104 
 1 ≤ cost[i] ≤ 104,  i  [1, n] 
 There will always be a unique solution. 
 
Output Format 
 
For each test case, print two space-separated integers denoting the indices of the two flavors 
purchased, in ascending order. 
 
  

 
Sample Input 
 
2 
4 
5 
1 4 5 3 2 
4 
4 
2 2 4 3 
 
Sample Output 
 
1 4 
1 2 
 
Explanation 
 
Sunny and Johnny make the following two trips to the parlor: 
 
1. The first time, they pool together m = 4 dollars. Of the five flavors available that day, flavors 
1 and 4 have a total cost of 1 + 3 = 4. 
2. The second time, they pool together m = 4 dollars. TOf the four flavors available that day, 
flavors 1 and 2 have a total cost of 2 + 2 = 4.





program 3
Check pair with difference k 
 
Given an array A of sorted integers and another non negative integer k, find if there exists 2 
indices i and j such that A[i] - A[j] = k, i != j. 
 
Input Format 
 
1. First line is number of test cases T. Following T lines contain: 
2. N, followed by N integers of the array 
3. The non-negative integer k 
 
Output format 
 
Print 1 if such a pair exists and 0 if it doesn’t. 
 
Example 
 
Input: 
 
1 
3 1 3 5 
4 
 
Output: 
 
1 
 
Input: 
 
1 
3 1 3 5 
99 
 
Output: 
 
0 





program 4

Chocolates 
 
Sam loves chocolates and starts buying them on the 1st day of the year. Each day of the year, x, 
is numbered from 1 to Y. On days when x is odd, Sam will buy x chocolates; on days when x is 
even, Sam will not purchase any chocolates. 
 
Complete the code in the editor so that for each day Ni (where 1 ≤ x ≤ N ≤ Y) in array arr, the 
number of chocolates Sam purchased (during days 1 through N) is printed on a new line. This 
is a function-only challenge, so input is handled for you by the locked stub code in the editor. 
 
Input Format 
 
The program takes an array of integers as a parameter. 
 
The locked code in the editor handles reading the following input from stdin, assembling it into 
an array of integers (arr), and calling calculate(arr). 
 
The first line of input contains an integer, T (the number of test cases). Each line i of 
the T subsequent lines describes the ith test case as an integer, Ni (the number of days). 
 
Constraints 
 
1 ≤ T ≤ 2 × 105 
1 ≤ N ≤ 2 × 106 
1 ≤ x ≤ N ≤ Y 
 
Output Format 
 
For each test case, Ti in arr, your calculate method should print the total number of chocolates 
Sam purchased by day Ni on a new line. 
 
Sample Input 0 
 
3 
1 
2 
3 
 
Sample Output 0 
 
1 
1 
4 
 
 Explanation 
 
Test Case 0: N = 1 
Sam buys 1 chocolate on day 1, giving us a total of 1 chocolate. Thus, we print 1 on a new line. 
 
Test Case 1: N = 2 
Sam buys 1 chocolate on day 1 and 0 on day 2. This gives us a total of 1 chocolate. Thus, we 
print 1 on a new line. 
 
Test Case 2: N = 3 
Sam buys 1 chocolate on day 1, 0 on day 2, and 3 on day 3. This gives us a total of 4 chocolates. 
Thus, we print 4 on a new line.






program 5
Football Scores 
 
The number of goals achieved by two football teams in matches in a league is given in the form 
of two lists. Consider: 
 
 Football team A, has played three matches, and has scored { 1 , 2 , 3 } goals in each match 
respectively. 
 Football team B, has played two matches, and has scored { 2, 4 } goals in each match 
respectively. 
 Your task is to compute, for each match of team B, the total number of matches of team A, 
where team A has scored less than or equal to the number of goals scored by team B in that 
match. 
 In the above case: 
 For 2 goals scored by team B in its first match, team A has 2 matches with scores 1 and 2. 
 For 4 goals scored by team B in its second match, team A has 3 matches with scores 1, 2 and 
3. 
 
Hence, the answer: {2, 3}.  
  
Complete the code in the editor below. The program must return an array of m positive integers, 
one for each maxes[i] representing the total number of elements nums[j] satisfying nums[j] ≤ 
maxes[i] where 0 ≤ j < n and 0 ≤ i < m, in the given order. 
  
It has the following: 
    nums[nums[0],...nums[n-1]]:  first array of positive integers 
    maxes[maxes[0],...maxes[n-1]]:  second array of positive integers 
  
Constraints 
 
 2 ≤ n, m ≤ 105 
 1 ≤ nums[j] ≤ 109, where 0 ≤ j < n. 
 1 ≤ maxes[i] ≤ 109, where 0 ≤ i < m. 
  
Input Format For Custom Testing 
 
Input from stdin will be processed as follows and passed to the function. 
  
The first line contains an integer n, the number of elements in nums. 
The next n lines each contain an integer describing nums[j] where 0 ≤ j < n. 
The next line contains an integer m, the number of elements in maxes. 
The next m lines each contain an integer describing maxes[i] where 0 ≤ i < m. 
  
  

 
Sample Case 0 
 
Sample Input 0 
 
4 
1 
4 
2 
4 
2 
3 
5 
 
Sample Output 0 
 
2 
4 
 
Explanation 0 
 
We are given n = 4, nums = [1, 4, 2, 4], m = 2, and maxes = [3, 5]. 
1. For maxes[0] = 3, we have 2 elements in nums (nums[0] = 1 and nums[2] = 2) that are ≤ 
maxes[0]. 
2. For maxes[1] = 5, we have 4 elements in nums (nums[0] = 1, nums[1] = 4, nums[2] = 2, 
and nums[3] = 4) that are ≤ maxes[1]. 
 
Thus, the function returns the array [2, 4] as the answer. 
 
Sample Case 1 
 
Sample Input 1 
 
5 
2 
10 
5 
4 
8 
4 
3 
1 
7 
8 
 
Sample Output 1 
 
1 
0 
3 
4 
 
 
Explanation 1 
 
We are given, n = 5, nums = [2, 10, 5, 4, 8], m = 4, and maxes = [3, 1, 7, 8]. 
1. For maxes[0] = 3, we have 1 element in nums (nums[0] = 2) that is ≤ maxes[0]. 
2. For maxes[1] = 1, there are 0 elements in nums that are ≤ maxes[1]. 
3. For maxes[2] = 7, we have 3 elements in nums (nums[0] = 2, nums[2] = 5, and nums[3] = 4) 
that are ≤ maxes[2]. 
4. For maxes[3] = 8, we have 4 elements in nums (nums[0] = 2, nums[2] = 5, nums[3] = 4, 
and nums[4] = 8) that are ≤ maxes[3]. 
 
Thus, the function returns the array [1, 0, 3, 4] as the answer.